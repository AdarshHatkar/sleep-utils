{"mappings":"AAAO,eAAe,0CAAM,YAAoB;IAC5C,OAAO,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;AACtD;AAEO,eAAe,0CAAa,OAAe;IAChD,MAAM,eAAe,UAAU;IAC/B,OAAO,0CAAM;AACf;AAEO,eAAe,0CAAa,OAAe;IAChD,MAAM,eAAe,UAAA;IACrB,OAAO,0CAAM;AACf;AAEO,eAAe,0CAAW,SAAiB;IAChD,MAAM,cAAc,KAAK,GAAG;IAC5B,MAAM,aAAa,KAAK,GAAG,CAAC,GAAG,YAAY;IAC3C,OAAO,0CAAM;AACf;AAEO,eAAe,0CAAY,GAAW,EAAE,GAAW;IACxD,MAAM,qBAAqB,KAAK,KAAK,CAAC,KAAK,MAAM,KAAM,CAAA,MAAM,MAAM,CAAA,KAAM;IACzE,OAAO,0CAAM;AACf","sources":["src/index.ts"],"sourcesContent":["export async function sleep(milliseconds: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  }\r\n  \r\n  export async function sleepSeconds(seconds: number): Promise<void> {\r\n    const milliseconds = seconds * 1000;\r\n    return sleep(milliseconds);\r\n  }\r\n  \r\n  export async function sleepMinutes(minutes: number): Promise<void> {\r\n    const milliseconds = minutes * 60 * 1000;\r\n    return sleep(milliseconds);\r\n  }\r\n  \r\n  export async function sleepUntil(timestamp: number): Promise<void> {\r\n    const currentTime = Date.now();\r\n    const timeToWait = Math.max(0, timestamp - currentTime);\r\n    return sleep(timeToWait);\r\n  }\r\n  \r\n  export async function sleepRandom(min: number, max: number): Promise<void> {\r\n    const randomMilliseconds = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return sleep(randomMilliseconds);\r\n  }\r\n  "],"names":[],"version":3,"file":"main.js.map"}
{"mappings":"AAAA,sBAA4B,YAAY,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAE7D;AAED,6BAAmC,OAAO,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAGjE;AAED,6BAAmC,OAAO,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAGjE;AAED,2BAAiC,SAAS,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAIjE;AAED,4BAAkC,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAGzE","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"export async function sleep(milliseconds: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  }\r\n  \r\n  export async function sleepSeconds(seconds: number): Promise<void> {\r\n    const milliseconds = seconds * 1000;\r\n    return sleep(milliseconds);\r\n  }\r\n  \r\n  export async function sleepMinutes(minutes: number): Promise<void> {\r\n    const milliseconds = minutes * 60 * 1000;\r\n    return sleep(milliseconds);\r\n  }\r\n  \r\n  export async function sleepUntil(timestamp: number): Promise<void> {\r\n    const currentTime = Date.now();\r\n    const timeToWait = Math.max(0, timestamp - currentTime);\r\n    return sleep(timeToWait);\r\n  }\r\n  \r\n  export async function sleepRandom(min: number, max: number): Promise<void> {\r\n    const randomMilliseconds = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return sleep(randomMilliseconds);\r\n  }\r\n  "],"names":[],"version":3,"file":"types.d.ts.map"}